#1 The question was generated by chat gpt
"""
You are tasked with managing flight bookings for a small airline. The API provides data about current bookings,
 passengers, and available flights. Your job is to manage and modify this data to prepare a report that the
 airline can use to allocate seats and determine overbooked flights.

Objectives:
Fetch flight bookings and passenger details from the API.
Check for overbooked flights (flights where the number of passengers exceeds the available seats).
Reallocate passengers from overbooked flights to the next available flights if possible.
Generate a summary report containing the flight number, total passengers, available seats, and the number
of passengers reallocated due to overbooking.
Send the updated booking data back to the server after reallocating passengers.

GET https://api.example.com/flights
Retrieves flight data, including available seats and a list of passengers for each flight.

Example response:

json
Copy code
[
    {
        "flight_number": "AA123",
        "available_seats": 100,
        "passengers": [
            {"id": 1, "name": "John Doe", "age": 30},
            {"id": 2, "name": "Jane Smith", "age": 25}
        ]
    },
    {
        "flight_number": "AA456",
        "available_seats": 50,
        "passengers": [
            {"id": 3, "name": "Emily Davis", "age": 40},
            {"id": 4, "name": "Michael Brown", "age": 60}
        ]
    }
]
GET https://api.example.com/passengers/{id}
Retrieves detailed passenger data, such as frequent flyer status or special needs, for a given passenger ID.

Example response for id=1:

json
Copy code
{
    "id": 1,
    "name": "John Doe",
    "age": 30,
    "frequent_flyer": true,
    "special_needs": false
}
POST https://api.example.com/flights/update
Send back the updated flight booking data (after reallocating passengers from overbooked flights).

Example:

json
Copy code
[
    {
        "flight_number": "AA123",
        "available_seats": 100,
        "passengers": [
            {"id": 1, "name": "John Doe", "age": 30}
        ]
    },
    {
        "flight_number": "AA789",
        "available_seats": 50,
        "passengers": [
            {"id": 3, "name": "Emily Davis", "age": 40}
        ]
    }
]
"""

import os
import requests
import JSON
from dotenv import load_dotenv

load_dotenv()

api_key = os.getenv("API_KEY")

def get_flights():
    response = requests.get("https://api.example.com/flights", headers={"Authorization": f"{api_key}"})
    flights_data = response.json()
    return flights_data

def get_passeger(id):
    response = requests.get(f"https://api.example.com/passengers/{id}", headers={"Authorization": f"{api_key}"})
    passenger_data = response.json()
    return passenger_data

def post_update(new_data):
    response = requests.post("https://api.example.com/flights/update", json=new_data, headers={"Authorization": f"{api_key}"})
    print(response.status)
    return None

def passengers_to_change(flights_data):
    result = []
    for flight in flights_data:
        flight_number = flight[flight_number]
        if flight[available_seats] < flight[passengers].len():
            count = flight[passengers].len() - flight[available_seats]
            changing_passengers = {"flight_number" : flight_number, "passengers": []}
            for passenger in flight[passengers]:
                passenger_data = get_passeger(passenger[id])
                if count == 0:
                    break
                if not passenger_data[frequent_flyer]:
                    changing_passengers[passengers].append({"id": passenger_data[id], "transfer": false})
                    count -= 1

            if count > 0:
                for passenger in flight[passengers]:
                    passenger_data = get_passeger(passenger[id])
                    if count == 0:
                        break
                    if not {"id": passenger_data[id], "transfer": false} in changing_passengers[passengers]:
                        changing_passengers[passengers].append({"id": passenger_data[id], "transfer": false})
                        count -= 1

            result.append(changing_passengers)

    return result

def changing_flights(flights_data, passengers_relocating):
    for relocate_info in passengers_relocating:
        flight_number = relocate_info["flight_number"]
        passengers_to_move = relocate_info["passengers"]

        for flight in flights_data:
            if flight["flight_number"] == flight_number:
                overbooked_flight = flight
                break

        for passenger in passengers_to_move:
            passenger_moved = False
            for new_flight in flights_data:
                if new_flight["flight_number"] != flight_number and new_flight["available_seats"] > 0:
                    new_flight["passengers"].append(passenger)
                    new_flight["available_seats"] -= 1
                    passenger["transfer"] = True
                    passenger_moved = True
                    break

            if passenger_moved:
                overbooked_flight["passengers"] = [p for p in overbooked_flight["passengers"] if p["id"] != passenger["id"]]
                overbooked_flight["available_seats"] += 1

    return flights_data

def manage_flights():
    flights_data = get_flights()
    passengers_relocating = passengers_to_change(flights_data)
    updated_flights_data = changing_flights(flights_data, passengers_relocating)
    post_update(updated_flights_data)

    for flight in updated_flights_data:
        total_passengers = len(flight["passengers"])
        available_seats = flight["available_seats"]
        flight_number = flight["flight_number"]
        print(f"Flight {flight_number}: {total_passengers} passengers, {available_seats} seats remaining")

    return updated_flights_data

